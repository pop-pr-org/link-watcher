#!/usr/bin/env python
# coding=utf-8

from pprint import pprint
from datetime import datetime, timedelta
from pytz import timezone as tz
from logging import getLogger
from os import environ

from tsdb import Tsdb
from influxdb import InfluxDBClient
from config import LOGGER_NAME, OUTPUT_TIMEZONE, TSDB_TIME_FORMAT

logger = getLogger(__name__)


class TsdbExtractor(Tsdb):
    def connect(self, host, port, username, password, database):
        """
        Connect to TSDB and return the client object
        """
        auth = {
            "username": username,
            "password": password,
            "database": database,
            "host": host,
            "port": port,
        }
        try:
            client = InfluxDBClient(**auth, retries=2, timeout=10)
        except Exception as e:
            logger.error("error connecting to influxdb: %s", e)
            return exit(1)
        return client

    def query_iface_traffic(
        link_configs: dict, iface: str, db_client: InfluxDBClient
    ) -> list:
        """
        query TSDB for a given host interface (rx|tx) traffic with a set time range

        Params:
        - link_configs: dict with the following format:
            {
                "LINKS": [
                    {
                        "LINK_SPEED": speed in bits,
                        "LINK_NAME": name of the link in your IRM
                    },
                ]
            }
        - iface: interface name (rx|tx)
        - db_client: tsdb client object

        Returns:

        Should return a list of dicts with AT LEAST these key:value pairs:

        [
            {
                "time": timestamp,
                "value": value in bits
            },
        ]

        If no data is found, returns an empty list

        """

        # set the time format
        timezone_offset = (
            datetime.now(tz(OUTPUT_TIMEZONE)).utcoffset().total_seconds() / 3600
        )

        starting_time = environ["QUERY_DATE_BEGIN"]
        # convert to datetime object in the correct format
        starting_time = datetime.strptime(starting_time, TSDB_TIME_FORMAT)
        # Influx is using utc so we need to add/subtract the timezone offset
        starting_time = starting_time - timedelta(hours=timezone_offset)

        ending_time = environ["QUERY_DATE_END"]
        # convert to datetime object in the correct format
        ending_time = datetime.strptime(ending_time, TSDB_TIME_FORMAT)
        # Influx is using utc so we need to add/subtract the timezone offset
        ending_time = ending_time - timedelta(hours=timezone_offset)

        # querying influxdb
        try:
            query = 'SELECT * from "check_iface_traffic" WHERE "time" >= \'{}\' AND "time" <= \'{}\' AND  \
                "hostname" = \'{}\' AND "metric" = \'iface-traffic{}\''.format(
                starting_time, ending_time, link_configs["LINK_NAME"].upper(), iface
            )
            tag = db_client.query(query)
        except Exception as e:
            logger.error("error querying influxdb: %s", e)
            return []  # returning empty list

        # extracting points
        tag = tag.get_points()

        # data needs to be a list of dicts
        # with at least 'time' and 'value' keys
        # removing None values
        data = [t for t in tag if t["value"] is not None]
        # pprint(data)

        return data

    def query_iface_percentile(
        self,
        percentile: str,
        starting_time,
        ending_time,
        current_link_name: str,
        iface: str,
        db_client: InfluxDBClient,
    ):
        """
        query TSDB for a given host interface (rx|tx) percentile of the traffic with a set time range

        update the reports dict with the percentile value
        """
        # set the time format
        timezone_offset = (
            datetime.now(tz(OUTPUT_TIMEZONE)).utcoffset().total_seconds() / 3600
        )

        starting_time = datetime.strptime(starting_time, TSDB_TIME_FORMAT)
        # Influx is using utc so we need to add/subtract the timezone offset
        starting_time = starting_time - timedelta(hours=timezone_offset)

        ending_time = datetime.strptime(ending_time, TSDB_TIME_FORMAT)
        # Influx is using utc so we need to add/subtract the timezone offset
        ending_time = ending_time - timedelta(hours=timezone_offset)
        percentile = float(PERCENTILE)
        try:
            query = "SELECT percentile(\"value\",{}) FROM \"check_iface_traffic\" WHERE \"hostname\" = '{}' AND \
                \"metric\" = 'iface-traffic{}' AND \"ifdesc\" = 'ge-0/0/0.0' AND \"switch\" = 'RT-{}' AND time >= '{}' AND time <= '{}'".format(
                percentile,
                current_link_name.upper(),
                iface,
                current_link_name.upper(),
                starting_time,
                ending_time,
            )
            tag = db_client.query(query)
        except Exception as e:
            logger.error("error querying influxdb: %s", e)
            return 0

        tag = tag.get_points()
        # accessing the first element of the list(an ordered dict) and then accessing the percentile key
        data = [t for t in tag if t["percentile"] is not None]

        # multiplying by 8 to convert from bytes to bits
        if data:
            data = data[0]["percentile"] * 8
        else:
            data = 0

        return data
